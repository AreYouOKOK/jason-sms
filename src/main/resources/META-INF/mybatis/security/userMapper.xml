<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jason.sms.domain.security.User">

<resultMap type="User" id="userOneselfResult">
	<id property="id" column="id"/>
	<result property="username" column="username"/>
	<result property="password" column="password"/>
	<result property="accountNonLocked" column="account_non_locked"/>
	<result property="roleId" column="role_id"/>
</resultMap>

<resultMap type="User" id="userResult">
	<id property="id" column="id"/>
	<result property="username" column="username"/>
	<result property="password" column="password"/>
	<result property="accountNonLocked" column="account_non_locked"/>
	<result property="roleId" column="role_id"/>
	<association property="role" javaType="Role" resultMap="roleOnUserResult" />
</resultMap>

<resultMap type="Role" id="roleOnUserResult">
	<id property="id" column="role_id"/>
	<result property="name" column="role_name"/>
	<collection property="authorities" ofType="Authority" resultMap="authorityOnUserResult"/>
</resultMap>

<resultMap type="Authority" id="authorityOnUserResult">
	<id property="id" column="authority_id"/>
	<result property="name" column="authority_name"/>
	<result property="permission" column="authority_permission"/>
</resultMap>

<resultMap type="User" id="lazyUserResult">
	<id property="id" column="id"/>
	<result property="username" column="username"/>
	<result property="password" column="password"/>
	<result property="accountNonLocked" column="account_non_locked"/>
	<result property="roleId" column="role_id"/>
	<association property="role" javaType="Role" resultMap="lazyRoleOnUserResult" />
</resultMap>

<resultMap type="Role" id="lazyRoleOnUserResult">
	<id property="id" column="role_id"/>
	<result property="name" column="role_name"/>
</resultMap>

<sql id="commonSelect">
	select 
		self.*,
		role.id as role_id,
		role.name as role_name,
		authority.id as authority_id,
		authority.name as authority_name,
		authority.permission as authority_permission 
	from security_user self 
  	left join security_role role on role.id=self.role_id 
	left join security_role_authority roleAuthority on role.id=roleAuthority.role_id 
	left join security_authority authority on authority.id=roleAuthority.authority_id 
</sql>
<sql id="lazySelect">
	select 
		self.*,
		role.id as role_id,
		role.name as role_name 
	from security_user self 
  	left join security_role role on role.id=self.role_id 
</sql>
<sql id="userOneselfSelect">
    select self.* from security_user self 
</sql>



<insert id="save" keyProperty="id" useGeneratedKeys="true" >
	insert into security_user(username,password,account_non_locked,role_id) values(#{username},#{password},#{accountNonLocked},#{roleId})				
</insert>

<update id="update" >
	update security_user set username=#{username},password=#{password},account_non_locked=#{accountNonLocked},role_id=#{roleId} where id=#{id}
</update>

<delete id="delete" >
	delete from security_user where id=#{id}
</delete>


<update id="markLocked" >
	update security_user set account_non_locked=0 where id in 
	<foreach item="id" collection="array" open="(" separator="," close=")">
		#{id}
	</foreach>
</update>
<update id="markNotLocked" >
	update security_user set account_non_locked=1 where id in 
	<foreach item="id" collection="array" open="(" separator="," close=")">
		#{id}
	</foreach>
</update>

<select id="idsAsUsers" resultMap="userOneselfResult">
	<include refid="userOneselfSelect"/>
	 where id in 
	<foreach item="id" collection="array" open="(" separator="," close=")">
		#{id}
	</foreach>
</select>

<select id="get" resultMap="userResult">
	<include refid="commonSelect"/>
	where self.id=#{id}
</select>

<select id="lazyGet" resultMap="lazyUserResult">
	<include refid="lazySelect"/>
	where self.id=#{id}
</select>

<select id="queryUniqueByUsername" resultMap="userResult">
	<include refid="commonSelect"/>
	where self.username=#{username}
</select>

<select id="queryPage" resultMap="lazyUserResult" useCache="false">
	<include refid="lazySelect"/>
	<where>
		<if test="params.username != null and params.username !=''">
			and self.username like concat(concat('%',#{params.username}),'%')
		</if>
	</where>
</select>

<select id="query" resultMap="lazyUserResult">
    <include refid="lazySelect"/>
</select>

</mapper>